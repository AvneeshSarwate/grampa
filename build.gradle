buildscript {
	repositories {
		jcenter()
	}
	dependencies {
	}
}

plugins {
	id 'java'
	id 'jacoco'
	id 'maven'
	id 'maven-publish'
	id 'com.diffplug.gradle.spotless' version '3.20.0'
	id 'com.jfrog.bintray' version '1.8.4'
	id 'com.github.spotbugs' version '1.7.1'
	id 'com.github.ben-manes.versions' version '0.21.0'
}

group 'com.mpe85'

sourceCompatibility = 11
targetCompatibility = 11

repositories {
	jcenter()
}

configurations {
	testCompileOnly.extendsFrom compileOnly
}

dependencies {
	implementation(
		'com.google.guava:guava:27.1-jre',
		'one.util:streamex:0.6.8',
		'net.bytebuddy:byte-buddy:1.9.11',
		'com.ibm.icu:icu4j:63.1'
	)
	compileOnly(
		'com.github.spotbugs:spotbugs-annotations:3.1.12'
	)
	testImplementation(
		'org.junit.jupiter:junit-jupiter-api:5.4.1'
	)
	testRuntimeOnly(
		'org.junit.jupiter:junit-jupiter-engine:5.4.1',
		'org.junit.platform:junit-platform-launcher:1.4.1'
	)
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

javadoc {
	options {
		links('https://docs.oracle.com/en/java/javase/11/docs/api/')
	}
}

jar {
	manifest {
		mainAttributes(
			'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Implementation-Vendor': project.group,
            'Created-By': "${System.properties['java.version']} (${System.properties['java.vendor']})",
            'Automatic-Module-Name': "${project.group}.${project.name}"
        )
	}
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

artifacts {
	archives javadocJar, sourcesJar
}

spotbugs {
	toolVersion = '3.1.12'
	ignoreFailures = true
	effort = 'max'
	reportLevel = 'low'
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
	reports {
		html.enabled = true
		xml.enabled = false
	}
}

spotless {
	java {
		eclipse().configFile '.settings/org.eclipse.jdt.core.prefs'
	}
}

test {
	useJUnitPlatform()
	
	dependsOn 'cleanTest'
	
	testLogging {
		events 'passed', 'skipped', 'failed'
	}
}

def gitUrl = "https://github.com/mpe85/${project.name}"

def pomConfig = {
	licenses {
		license {
			name 'MIT'
			url "${gitUrl}/blob/master/LICENSE"
		}
	}
	developers {
		developer {
			id 'mpe85'
			name 'Marco Perazzo'
			email 'marco.perazzo85@gmail.com'
		}
	}
	scm {
		url "${gitUrl}"
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			artifact sourcesJar {
				classifier "sources"
			}
			artifact javadocJar {
				classifier "javadoc"
			}
			groupId "${group}"
			artifactId "${project.name}"
			version "$project.version"
			pom.withXml {
				def root = asNode()
				root.appendNode('description', 'A sample project')
				root.appendNode('name', "${group}:${project.name}")
				root.appendNode('url', "${gitUrl}")
				root.children().last() + pomConfig
			}
		}
	}
}

bintray {
	user = project.hasProperty('bintrayUser') ? bintrayUser : System.env.bintrayUser
	key = project.hasProperty('bintrayKey') ? bintrayKey : System.env.bintrayKey
	publications = ['mavenJava']

	pkg {
		repo = 'maven'
		name = "${project.name}"
		licenses = ['MIT']
		websiteUrl = "${gitUrl}"
		issueTrackerUrl = "${gitUrl}/issues"
		vcsUrl = "${gitUrl}.git"
		version {
			name = "$project.version"
			desc = "$project.version"
			released  = new Date()
			vcsTag = project.version
		}
	}
}
